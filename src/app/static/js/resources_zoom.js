// src/app/static/js/resources_zoom.js

document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("zoom-upload-form");
    const fileInput = document.getElementById("zoom-file");
    const reportsEl = document.getElementById("zoom-reports");
    const rid = (window.location.pathname.split("/").pop());
    const listEl = document.getElementById("zoom-list");

    // modal helpers
    const processingModal = document.getElementById("processing-modal");

    function showProcessing(note = "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶") {
        try {
            if (processingModal) {
                processingModal.querySelector(".pm-title").textContent = note;
                processingModal.classList.remove("pm-hidden");
            }
        } catch (_) {
        }
    }

    function hideProcessing() {
        try {
            if (processingModal) {
                processingModal.classList.add("pm-hidden");
            }
        } catch (_) {
        }
    }

    // ‚îÄ‚îÄ –ü—Ä–æ–º–ø—Ç –æ—Ç—á—ë—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–µ—Å—É—Ä—Å) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    const promptEl = document.getElementById("report-prompt");
    const PROMPT_KEY = `reportPrompt:${rid}`;
    const DEFAULT_REPORT_PROMPT = `–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –≤—Å—Ç—Ä–µ—á–∏. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å–æ—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    1) –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤).
    2) –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è.
    3) –ó–∞–¥–∞—á–∏: "–ó–∞–¥–∞—á–∞ ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π ‚Äî –°—Ä–æ–∫".
    4) –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
    5) –†–∏—Å–∫–∏ –∏ next steps.
    –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –±–µ–∑ –≤–æ–¥—ã.`;

    if (promptEl) {
        try {
            promptEl.value = localStorage.getItem(PROMPT_KEY) || DEFAULT_REPORT_PROMPT;
        } catch (_) {
            promptEl.value = DEFAULT_REPORT_PROMPT;
        }
        const save = () => {
            try {
                localStorage.setItem(PROMPT_KEY, promptEl.value);
            } catch (_) {
            }
        };
        promptEl.addEventListener("input", save);
        promptEl.addEventListener("change", save);
        // –¥–æ—Å—Ç—É–ø –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        window.getReportPrompt = () => (promptEl && promptEl.value) ? promptEl.value : DEFAULT_REPORT_PROMPT;
    } else {
        window.getReportPrompt = () => DEFAULT_REPORT_PROMPT;
    }
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    loadPairs(rid);

    if (!form || !fileInput) return;

    form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const file = fileInput.files[0];
        if (!file) {
            alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .mp3 –∏–ª–∏ .mp4");
            return;
        }

        showProcessing("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞‚Ä¶");
        const formData = new FormData();
        formData.append("file", file);

        try {
            const rid = form.dataset.rid || (window.location.pathname.split("/").pop());
            const resp = await fetch(`/api/zoom/${rid}/upload`, {
                method: "POST",
                body: formData,
                credentials: "same-origin"
            });

            const data = await resp.json().catch(() => ({}));
            if (!resp.ok || !data.ok) {
                throw new Error(data.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
            }

            await loadPairs(rid);      // üîµ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Å–ø–∏—Å–æ–∫
            fileInput.value = "";      // –æ—á–∏—Å—Ç–∏–º input
            hideProcessing();
        } catch (err) {
            console.error("[zoom] upload error:", err);
        }
    });

    // --- –î–û–ë–ê–í–¨–¢–ï/–ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –í–ú–ï–°–¢–û loadFiles:
    async function loadPairs(rid) {
        try {
            const resp = await fetch(`/api/zoom/${rid}/items`, {credentials: "same-origin"});
            const data = await resp.json().catch(() => ({}));
            if (!resp.ok || !data.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞");

            if (!Array.isArray(data.items) || data.items.length === 0) {
                listEl.innerHTML = `<div class="note">–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
                return;
            }

            // –≤–µ—Ä—Å—Ç–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º: —Å–ª–µ–≤–∞ –∞—É–¥–∏–æ, –ø–æ —Ü–µ–Ω—Ç—Ä—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç, —Å–ø—Ä–∞–≤–∞ ‚Äî –û–¢–î–ï–õ–¨–ù–ê–Ø –∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç—á—ë—Ç–∞
            listEl.innerHTML = data.items.map(it => {
                const audio = it.audio;
                const tr = it.transcript;
                const report = it.report;

                const left = audio ? `
                <div class="card">
                    <div style="display:flex;align-items:center;justify-content:space-between;gap:12px;">
                        <div>
                            <strong>${audio.filename}</strong>
                            <div class="mono">–†–∞–∑–º–µ—Ä: ${(audio.size / 1024 / 1024).toFixed(2)} MB</div>
                            <div class="mono">–ó–∞–≥—Ä—É–∂–µ–Ω: ${audio.uploaded}</div>
                        </div>
                        <div style="display:flex;gap:8px;flex-wrap:wrap;justify-content:flex-end;">
                            <button class="btn primary" data-act="process" data-file="${audio.filename}">–û—Ç—Ä–∞–±–æ—Ç–∞—Ç—å</button>
                            <button class="btn danger" data-act="del-audio" data-file="${audio.filename}">–£–¥–∞–ª–∏—Ç—å</button>
                        </div>
                    </div>
                </div>
            ` : `
                <div class="card"><div class="mono">–ò—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç</div></div>
            `;

                const baseName = audio ? audio.filename : (tr?.filename || "").replace(/\.txt$/, "");
                const middle = tr?.exists ? `
                <div class="card">
                    <div style="display:flex;align-items:center;justify-content:space-between;gap:12px;">
                        <div>
                            <strong>${tr.filename}</strong>
                            <div class="mono">–†–∞–∑–º–µ—Ä: ${(tr.size / 1024 / 1024).toFixed(2)} MB</div>
                        </div>
                        <div style="display:flex;gap:8px;flex-wrap:wrap;justify-content:flex-end;">
                            <a class="btn" href="/api/zoom/${rid}/transcript/open?filename=${encodeURIComponent(baseName)}" target="_blank" rel="noopener">–û—Ç–∫—Ä—ã—Ç—å</a>
                            <button class="btn danger" data-act="del-tr" data-file="${baseName}">–£–¥–∞–ª–∏—Ç—å</button>
                        </div>
                    </div>
                </div>
            ` : `
                <div class="card"><div class="mono">–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω</div></div>
            `;

                const right = tr?.exists ? (
                    report?.exists ? `
                    <div class="card">
                        <div style="display:flex;align-items:center;justify-content:space-between;gap:12px;">
                            <div>
                                <strong>${report.filename}</strong>
                                <div class="mono">–†–∞–∑–º–µ—Ä: ${(report.size / 1024).toFixed(1)} KB</div>
                            </div>
                            <div style="display:flex;gap:8px;flex-wrap:wrap;justify-content:flex-end;">
                                <a class="btn" href="/api/zoom/${rid}/report/open?filename=${encodeURIComponent(report.filename)}" target="_blank">–ü–æ–∫–∞–∑–∞—Ç—å</a>
                                <button class="btn danger" data-act="del-report" data-file="${report.filename}">–£–¥–∞–ª–∏—Ç—å</button>
                            </div>
                        </div>
                    </div>
                ` : `
                    <div class="card">
                        <div style="display:flex;align-items:center;justify-content:space-between;gap:12px;">
                            <div><strong>–û—Ç—á—ë—Ç</strong></div>
                            <div>
                                <button class="btn primary" data-act="make-report" data-file="${baseName}">–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç</button>
                            </div>
                        </div>
                    </div>
                `
                ) : `
                <div class="card"><div class="mono">–û—Ç—á—ë—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞</div></div>
            `;

                return `
                <div class="pair-row" style="display:grid;grid-template-columns:1fr 1fr 1fr;gap:12px;margin:10px 0;">
                    ${left}
                    ${middle}
                    ${right}
                </div>
            `;
            }).join("");

            // –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–æ–≤
            listEl.querySelectorAll("[data-act]").forEach(btn => {
                btn.addEventListener("click", async () => {
                    const act = btn.dataset.act;
                    const file = btn.dataset.file;

                    try {
                        if (act === "process") {
                            showProcessing("–ò–¥–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è‚Ä¶");
                            const resp = await fetch(`/api/zoom/${rid}/process`, {
                                method: "POST",
                                headers: {"Content-Type": "application/json"},
                                credentials: "same-origin",
                                body: JSON.stringify({filename: file}),
                            });
                            hideProcessing();
                            const d = await resp.json().catch(() => ({}));
                            if (!resp.ok || !d.ok) throw new Error(d.error || "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏");

                            setTimeout(() => loadPairs(rid), 2000);
                        }

                        if (act === "del-audio") {
                            if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${file}?`)) return;
                            const resp = await fetch(`/api/zoom/${rid}/audio?filename=${encodeURIComponent(file)}`, {
                                method: "DELETE",
                                credentials: "same-origin",
                            });
                            const d = await resp.json().catch(() => ({}));
                            if (!resp.ok || !d.ok) throw new Error(d.error || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
                            loadPairs(rid);
                        }

                        if (act === "del-tr") {
                            if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è: ${file}?`)) return;
                            const resp = await fetch(`/api/zoom/${rid}/transcript?filename=${encodeURIComponent(file)}`, {
                                method: "DELETE",
                                credentials: "same-origin",
                            });
                            const d = await resp.json().catch(() => ({}));
                            if (!resp.ok || !d.ok) throw new Error(d.error || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
                            loadPairs(rid);
                        }

                        if (act === "make-report") {
                            const prompt = (window.getReportPrompt && window.getReportPrompt()) || "";
                            showProcessing("–§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶");
                            const resp = await fetch(`/api/zoom/${rid}/report`, {
                                method: "POST",
                                headers: {"Content-Type": "application/json"},
                                credentials: "same-origin",
                                body: JSON.stringify({filename: file, prompt}),
                            });
                            hideProcessing();
                            const d = await resp.json().catch(() => ({}));
                            if (!resp.ok || !d.ok) throw new Error(d.error || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞");

                            setTimeout(() => loadPairs(rid), 2000);
                        }

                        if (act === "del-report") {
                            if (!confirm(`–£–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç: ${file}?`)) return;
                            const resp = await fetch(`/api/zoom/${rid}/report?filename=${encodeURIComponent(file)}`, {
                                method: "DELETE",
                                credentials: "same-origin",
                            });
                            const d = await resp.json().catch(() => ({}));
                            if (!resp.ok || !d.ok) throw new Error(d.error || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞");
                            loadPairs(rid);
                        }

                    } catch (e) {
                        console.error("[zoom] action error:", e);
                        alert(e.message || "–û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è");
                    }
                });
            });

        } catch (err) {
            console.error("[zoom] loadPairs error:", err);
            listEl.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>`;
        }
    }


    async function loadReports(rid) {
        try {
            const resp = await fetch(`/api/zoom/${rid}/reports`, {
                credentials: "same-origin"
            });
            const data = await resp.json().catch(() => ({}));
            if (!resp.ok || !data.ok) {
                throw new Error(data.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤");
            }

            if (!Array.isArray(data.items) || data.items.length === 0) {
                reportsEl.innerHTML = `<div class="note">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤</div>`;
                return;
            }

            reportsEl.innerHTML = "";
            data.items.forEach((it) => {
                const div = document.createElement("div");
                div.className = "card";
                div.style.margin = "10px 0";
                div.innerHTML = `
                    <h3>–í—Å—Ç—Ä–µ—á–∞: ${it.filename || "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</h3>
                    <p><strong>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:</strong><br>${it.summary || "‚Äî"}</p>
                    <button class="btn" data-file="${it.filename}">–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç</button>
                `;
                reportsEl.appendChild(div);

                const btn = div.querySelector("button");
                btn.addEventListener("click", () => {
                    alert(it.transcript || "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞");
                });
            });
        } catch (err) {
            console.error("[zoom] loadReports error:", err);
            reportsEl.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤</div>`;
        }
    }
});

