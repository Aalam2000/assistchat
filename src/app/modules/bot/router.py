"""
src/app/modules/bot/router.py - –ú–æ–¥—É–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º AssistChat.
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å API –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—Å–∫–∞, –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏
–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

from fastapi import APIRouter, Request, Depends
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session as SASession
from src.app.core.db import get_db
from src.app.core.auth import get_current_user
from src.app.modules.bot.manager import bot_manager
from src.models.resource import Resource


router = APIRouter()


# -------------------------------------------------------------------------
# üåê –ü—Ä–µ—Ñ–ª–∞–π—Ç
# -------------------------------------------------------------------------
@router.get("/api/preflight")
async def api_preflight(request: Request, db: SASession = Depends(get_db)):
    user = get_current_user(request, db)
    if not user:
        return JSONResponse({"ok": False}, status_code=401)
    return bot_manager.preflight(user.id)


# -------------------------------------------------------------------------
# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
# -------------------------------------------------------------------------
@router.post("/api/bot/start")
async def api_bot_start(request: Request, db: SASession = Depends(get_db)):
    user = get_current_user(request, db)
    if not user:
        return JSONResponse({"ok": False}, status_code=401)
    return await bot_manager.start(user.id)


# -------------------------------------------------------------------------
# ‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∫–∞
# -------------------------------------------------------------------------
@router.post("/api/bot/stop")
async def api_bot_stop(request: Request, db: SASession = Depends(get_db)):
    user = get_current_user(request, db)
    if not user:
        return JSONResponse({"ok": False}, status_code=401)
    return await bot_manager.stop(user.id)


# -------------------------------------------------------------------------
# üìä –°—Ç–∞—Ç—É—Å
# -------------------------------------------------------------------------
@router.get("/api/bot/status")
async def api_bot_status(request: Request, db: SASession = Depends(get_db)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = get_current_user(request, db)
    if not user:
        return JSONResponse({"ok": False}, status_code=401)
    active = bool(user.bot_enabled)
    running = user.id in getattr(bot_manager, "workers", {})
    return {"ok": True, "bot_enabled": active, "running": running}


# -------------------------------------------------------------------------
# üîò –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ë–û–¢–∞ (–≤–∫–ª/–≤—ã–∫–ª)
# -------------------------------------------------------------------------
@router.post("/api/bot/toggle")
async def api_bot_toggle(request: Request, db: SASession = Depends(get_db)):
    """–ú–µ–Ω—è–µ—Ç —Ñ–ª–∞–≥ user.bot_enabled –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç/–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä—ã."""
    user = get_current_user(request, db)
    if not user:
        return JSONResponse({"ok": False}, status_code=401)

    user.bot_enabled = not bool(user.bot_enabled)
    db.add(user)
    db.commit()
    db.refresh(user)

    if user.bot_enabled:
        result = await bot_manager.start(user.id)
    else:
        result = await bot_manager.stop(user.id)

    return JSONResponse({
        "ok": True,
        "bot_enabled": user.bot_enabled,
        "result": result,
    })

@router.get("/api/bot/state")
async def api_bot_state(request: Request, db: SASession = Depends(get_db)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = get_current_user(request, db)
    if not user:
        return JSONResponse({"ok": False}, status_code=401)

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–∞ –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
    bot_enabled = bool(user.bot_enabled)
    running = user.id in getattr(bot_manager, "workers", {})

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ –ë–î)
    rows = db.query(Resource).filter_by(user_id=user.id).all()
    resources = []
    for r in rows:
        meta = r.meta_json or {}
        creds = meta.get("creds") or {}
        has_session = bool(creds.get("string_session"))
        resources.append({
            "id": str(r.id),
            "provider": r.provider,
            "status": r.status,
            "phase": r.phase,
            "has_session": has_session,
            "error": getattr(r, "last_error_code", None),
        })

    return {
        "ok": True,
        "bot_enabled": bot_enabled,
        "running": running,
        "resources": resources,
    }
